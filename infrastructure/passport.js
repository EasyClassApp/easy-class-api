/* eslint-disable */
import passport from 'passport';
import { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';
import LocalStrategy from 'passport-local';
import User from '../models/User';
import Professor from '../models/Professor';
import Aluno from '../models/Aluno';
// return an error object in the same format as the ones generated by 'express-validator'
function generateErrorMessage(field, msg) {
  const errorMessageObj = { errors: {} };
  errorMessageObj.errors[field] = { msg };
  return errorMessageObj;
}

// checks if is a registered user -- used only for login, where the JWT is then provided
passport.use('admin', new LocalStrategy(
  {
    usernameField: 'email',
  },
  async (email, password, done) => {
    try {
      const user = await User.findOne({ email: email.toLowerCase() });
      if (!user) {
        return done(null, false, generateErrorMessage('email', 'O email informado está incorreto'));
      }

      const isMatch = await user.comparePassword(password);
      if (!isMatch) {
        return done(null, false, generateErrorMessage('password', 'A senha informada está incorreta'));
      }

      return done(null, user);
    } catch (err) {
      return done(err);
    }
  },
));

passport.use('professor', new LocalStrategy(
  {
    usernameField: 'email',
  },
  async (email, password, done) => {
    try {
      const professor = await Professor.findOne({ email: email.toLowerCase() });
      if (!professor) {
        return done(null, false, generateErrorMessage('email', 'O email informado está incorreto'));
      }

      /*
        TO DO: senhas de professor não estão criptografadas,
        deve ser arrumado o signup e ressetar o banco para depois descomentar a linha abaixo
        */
      // const isMatch = await professor.comparePassword(password);

      if (professor.senha !== password) {
        return done(null, false, generateErrorMessage('password', 'A senha informada está incorreta'));
      }

      return done(null, professor);
    } catch (err) {
      return done(err);
    }
  },
));

passport.use('aluno', new LocalStrategy(
  {
    usernameField: 'email',
  },
  async (email, password, done) => {
    try {
      const aluno = await Aluno.findOne({ email: email.toLowerCase() });
      if (!aluno) {
        return done(null, false, generateErrorMessage('email', 'O email informado está incorreto'));
      }

      /*
        TO DO: senhas de professor não estão criptografadas,
        deve ser arrumado o signup e ressetar o banco para depois descomentar a linha abaixo
        */
      // const isMatch = await aluno.comparePassword(password);
      if (aluno.senha !== password) {
        return done(null, false, generateErrorMessage('password', 'A senha informada está incorreta'));
      }

      return done(null, aluno);
    } catch (err) {
      return done(err);
    }
  },
));

// enables JWT authorization bearer verification -- used for any restricted API request
passport.use(new JwtStrategy(
  {
    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: process.env.JWT_SECRET,
  },
  async (payload, done) => {
    try {
      const user = await User.findById(payload.sub);
      if (!user) {
        return done(null, false);
      }
      return done(null, user);
    } catch (err) {
      return done(err);
    }
  },
));
